import React, { useEffect, useRef, useState } from "react";
import {
    Container,
    Typography,
    Table, TableHead, TableRow, TableBody, TableCell
} from "@mui/material";
import { APP_TITLE } from "../../../config.ts";
import { fetchCveBundle } from "../../../services/vulmatch_api.ts";
import { Link, useParams } from "react-router-dom";
import { URLS } from "../../../services/urls.ts";

type CVE = {
    id: string,
    description: string,
    created_at: string;
    x_cvss: Map<string, {
        base_score: string;
        base_severity: string;

    }>;
    labels: string;
    type: string;
    pattern: string;
    x_cpe_struct: {
        product: string;
    }
    external_references: {
        source_name: string;
        url: string;
        description: string;
        vector_string: string;
    }[]
}

function VulnerabilityDetailPage() {
    const [cve, setCve] = useState<CVE>()
    const [cves, setCves] = useState<CVE[]>([])
    const [kev, setKev] = useState<CVE>()
    const { id } = useParams<{ id: string }>()
    const stixRef = useRef(null);
    const [loading, setLoading] = useState(true)

    const getStixObject = (cves: CVE[]) => {
        // const reportId = objects.find(object => object.type === 'report')?.id
        // setReportId(reportId || '')
        return {
            "type": "bundle",
            "id": `bundle--aaaaa`,
            "spec_version": "2.1",
            objects: cves,
        }
    }

    const loadStixData = (cves: CVE[]) => {
        if (cves.length === 0) return

        // eslint-disable-next-line
        const graph = window.stixview.init(
            stixRef.current,
            null,
            () => {
                console.info("Graph loaded");
            },
            {}, // no additional data properties
            {
                hideFooter: false,
                showSidebar: true,
                maxZoom: 50,
                onClickNode: function (node) { }
            }
        );
        const data = getStixObject(cves)
        graph.loadData(data);
    }

    const loadData = async () => {
        if (!id) return
        const objects: CVE[] = await fetchCveBundle(id)
        setCves(objects)
        setCve(objects.find(item => item.type === 'vulnerability'))
        setKev(objects.find(item => item.labels === 'kev'))
        setLoading(false)
        loadStixData(objects)
    }

    useEffect(() => {
        if (!id) return
        loadData()
    }, [id])
    useEffect(() => {
        document.title = `Vulnerabilities | ${APP_TITLE}`
    }, [])

    return (
        <Container>
            <Typography variant="h5" > {id} </Typography>


            <Typography><span style={{fontWeight: 600}}>Description: </span>{cve?.description}</Typography>
            <Typography><span style={{fontWeight: 600}}>Vuln Status: </span>{cve?.external_references?.find(reference => reference.source_name === 'vulnStatus')?.description}</Typography>
            <Typography><span style={{fontWeight: 600}}>Source Identifier: </span>{cve?.external_references?.find(reference => reference.source_name === 'sourceIdentifier')?.description}</Typography>
            <Typography><span style={{fontWeight: 600}}>NVD URL: </span>{cve?.external_references?.find(reference => reference.source_name === 'cve')?.url}</Typography>

            <Typography sx={{ marginTop: '2rem' }} variant="h5">CVSS Scores</Typography>
            <Table>
                <TableHead>
                    <TableRow>
                        <TableCell>Version</TableCell>
                        <TableCell>Base Score</TableCell>
                        <TableCell>Base Severity</TableCell>
                        <TableCell>Vector</TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    {Object.keys(cve?.x_cvss || {}).map(version => <TableRow key={cve?.id}>
                        <TableCell>{version}</TableCell>
                        <TableCell>{cve?.x_cvss[version]?.base_score}</TableCell>
                        <TableCell>{cve?.x_cvss[version]?.base_severity}</TableCell>
                        <TableCell>{cve?.x_cvss[version]?.vector_string}</TableCell>
                    </TableRow>)}
                </TableBody>
            </Table>
            <Typography sx={{ marginTop: '2rem' }} variant="h5">References</Typography>
            <Table>
                <TableHead>
                    <TableRow>
                        <TableCell>Source name</TableCell>
                        <TableCell>Description</TableCell>
                        <TableCell>URL</TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    {cve?.external_references.map(refernce => <TableRow>
                        <TableCell>{refernce.source_name}</TableCell>
                        <TableCell>{refernce.description}</TableCell>
                        <TableCell>{refernce.url}</TableCell>
                    </TableRow>)}
                </TableBody>
            </Table>

            <Typography sx={{ marginTop: '2rem' }} variant="h5">KEV</Typography>
            {kev ? kev.description : 'NO REPORTED KEV'}

            <Typography sx={{ marginTop: '2rem' }} variant="h5">References</Typography>
            <Table>
                <TableHead>
                    <TableRow>
                        <TableCell>Source name</TableCell>
                        <TableCell>Description</TableCell>
                        <TableCell>URL</TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    {cve?.external_references.map(refernce => <TableRow key={cve.id}>
                        <TableCell>{refernce.source_name}</TableCell>
                        <TableCell>{refernce.description}</TableCell>
                        <TableCell>{refernce.url}</TableCell>
                    </TableRow>)}
                </TableBody>
            </Table>

            <Typography sx={{ marginTop: '2rem' }} variant="h5">CWE</Typography>
            <Table>
                <TableHead>
                    <TableRow>
                        <TableCell>CVE ID</TableCell>
                        <TableCell>CVE Description</TableCell>
                        <TableCell>Date Published</TableCell>
                        <TableCell>Base Score</TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    {cves.filter(cve => cve.type === 'weakness').map(cve => <TableRow key={cve.id}>
                        <TableCell><Link to={URLS.vulnerabilityDetailPage(cve.id)}>{cve.id}</Link></TableCell>
                        <TableCell>{cve.description}</TableCell>
                        <TableCell>{cve.created_at}</TableCell>
                        <TableCell>{cve?.x_cvss['v3_1']?.base_score}</TableCell>
                    </TableRow>)}
                </TableBody>
            </Table>


            <Typography sx={{ marginTop: '2rem' }} variant="h5">CAPEC</Typography>
            <Table>
                <TableHead>
                    <TableRow>
                        <TableCell>CAPEC ID</TableCell>
                        <TableCell>CAPEC Description</TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    {cves.filter(cve => cve.type === 'weakness').map(cve => <TableRow key={cve.id}>
                        <TableCell>{cve.id}</TableCell>
                        <TableCell>{cve.description}</TableCell>
                    </TableRow>)}
                </TableBody>
            </Table>

            <Typography sx={{ marginTop: '2rem' }} variant="h5">ATT&CK</Typography>
            <Table>
                <TableHead>
                    <TableRow>
                        <TableCell>ATT&CK ID</TableCell>
                        <TableCell>ATT&CK Description</TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    {cves.filter(cve => cve.type === 'weakness').map(cve => <TableRow key={cve.id}>
                        <TableCell>{cve.id}</TableCell>
                        <TableCell>{cve.description}</TableCell>
                    </TableRow>)}
                </TableBody>
            </Table>

            <Typography sx={{ marginTop: '2rem' }} variant="h5">Detection</Typography>
            <Table>
                <TableHead>
                    <TableRow>
                        <TableCell>Indicator ID</TableCell>
                        <TableCell>Pattern</TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    {cves.filter(cve => cve.type === 'indicator').map(cve => <TableRow key={cve.id}>
                        <TableCell>{cve.id}</TableCell>
                        <TableCell>{cve.pattern}</TableCell>
                    </TableRow>)}
                </TableBody>
            </Table>

            <Typography sx={{ marginTop: '2rem' }} variant="h5">Products</Typography>
            <Table>
                <TableHead>
                    <TableRow>
                        <TableCell>CPE</TableCell>
                        <TableCell>Is Vulnerable?</TableCell>
                        <TableCell>In your stack?</TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    {cves.filter(cve => cve.type === 'software').map(cve => <TableRow key={cve.id}>
                        <TableCell>{cve.x_cpe_struct.product}</TableCell>
                        <TableCell>{cve.description}</TableCell>
                        <TableCell>{cve.created_at}</TableCell>
                        <TableCell>{cve?.x_cvss['v3_1']?.base_score}</TableCell>
                    </TableRow>)}
                </TableBody>
            </Table>
            

            <div ref={stixRef}></div>

        </Container>
    );
}

export default VulnerabilityDetailPage;
